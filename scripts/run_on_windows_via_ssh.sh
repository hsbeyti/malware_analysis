#!/bin/bash

# SSH credentials and paths
WINDOWS_USER="hsbeyti"
WINDOWS_HOST="192.178.162.3"
SSH_PASSWORD="12345678"
LOCAL_SCRIPT_PATH="/home/hsbeyti/analysis/"
EXE_PATH="c:/Users/hsbeyti/tools/execut/bin"  # Correct Windows path format with forward slashes
SCRIPT_NAME="run.bat"  # Batch script name to execute

# Read arguments passed to the script
ARG1=$1            # First argument (file name without extension, for example: ping)
shift              # Shift to access remaining arguments
ARG2="$@"          # Remaining arguments (quoted to preserve spaces)

# Debugging output
echo "ARG1: $ARG1"
echo "ARG2: $ARG2"

# Transfer the local script to the remote machine
sshpass -p "$SSH_PASSWORD" scp "${LOCAL_SCRIPT_PATH}${ARG2}" ${WINDOWS_USER}@${WINDOWS_HOST}:"$EXE_PATH"

# Construct the command to run the batch file with the specific arguments
COMMAND="cmd.exe /c \"${EXE_PATH}\\${SCRIPT_NAME} ${ARG1}\""

# Execute the command via SSH and capture the output
echo "Executing batch file on ${WINDOWS_HOST}..."
OUTPUT=$(sshpass -p "$SSH_PASSWORD" ssh ${WINDOWS_USER}@${WINDOWS_HOST} "$COMMAND" 2>&1)

# Display the output received from the Windows machine
echo "Batch file output:"
echo "$OUTPUT"

# Reverse the copy operation: download the file back from the Windows machine
echo "Reversing the copy operation: Downloading file back to local machine..."
REMOTE_FILE="${EXE_PATH}/${ARG1}.csv" # Remote file path with forward slashes
LOCAL_DOWNLOAD_PATH="/home/hsbeyti/analysis/"  # Local path where the file will be saved

# Download the file from the remote machine
sshpass -p "$SSH_PASSWORD" scp  ${WINDOWS_USER}@${WINDOWS_HOST}:"$REMOTE_FILE" "$LOCAL_DOWNLOAD_PATH"

# Set timeout for the download (10 seconds)
TIMEOUT=10
START_TIME=$(date +%s)

# Wait for the file to be downloaded, checking every second
while [ ! -f "${LOCAL_DOWNLOAD_PATH}${ARG1}.csv" ]; do
    CURRENT_TIME=$(date +%s)
    ELAPSED_TIME=$((CURRENT_TIME - START_TIME))

    if [ $ELAPSED_TIME -ge $TIMEOUT ]; then
        echo "Timed out waiting for file download after $TIMEOUT seconds."
        break
    fi

    echo "Waiting for file to be downloaded..."
    sleep 1  # Wait 1 second before checking again
done

# Confirm the file has been downloaded
if [ -f "${LOCAL_DOWNLOAD_PATH}${ARG1}.csv" ]; then
    echo "File successfully downloaded to ${LOCAL_DOWNLOAD_PATH}${ARG1}.csv"
else
    echo "Failed to download file from remote machine."
fi

echo "Connection to ${WINDOWS_HOST} closed."