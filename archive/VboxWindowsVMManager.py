import traceback
import pyvbox
import time


class VirtualMachineSnapshotManager:
    def __init__(self, vm_name, vm_user, vm_password):
        self.vm_name = vm_name
        self.vm_user = vm_user
        self.vm_password = vm_password
        self.vbox = None
        self.machine = None
        self.session = None
        self.console = None
        self.guest_session = None

    def initialize_virtualbox(self):
        """Initialize VirtualBox Manager and the VM session using pyvbox."""
        try:
            print("Initializing pyvbox...")
            self.vbox = pyvbox.VirtualBox()  # Create the VirtualBox instance
            print("VirtualBox initialized successfully.")
        except Exception as e:
            print(f"Error initializing VirtualBox: {e}")
            traceback.print_exc()
            return False
        return True

    def locate_machine(self):
        """Locate and lock the VM machine using pyvbox."""
        try:
            self.machine = self.vbox.find_machine(self.vm_name)  # Find the VM by name
            print(f"Machine '{self.vm_name}' located.")

            # Lock the machine (we'll set it in an exclusive session to control it)
            self.session = self.machine.create_session()
            self.console = self.session.console
            print("Machine locked and console acquired.")
        except Exception as e:
            print(f"Error locating or locking machine '{self.vm_name}': {e}")
            traceback.print_exc()
            return False
        return True

    def create_guest_session(self):
        """Create a guest session on the VM."""
        try:
            self.guest_session = self.console.guest.create_session(self.vm_user, self.vm_password)
            print("Guest session created successfully.")
        except Exception as e:
            print(f"Error creating guest session: {e}")
            traceback.print_exc()
            return False
        return True

    def get_snapshot_by_name_or_uuid(self, snapshot_identifier):
        """Retrieve a snapshot by name or UUID."""
        try:
            # Check if the current snapshot matches the identifier (either name or UUID)
            current_snapshot = self.machine.current_snapshot
            if current_snapshot:
                if current_snapshot.name == snapshot_identifier or current_snapshot.uuid == snapshot_identifier:
                    print(f"Current snapshot with name/UUID '{current_snapshot.id_p()}' found.")
                    return current_snapshot.id_p()

            # Look for the snapshot in the list of all snapshots if not found in the current snapshot
            snapshots = self.machine.snapshots
            for snapshot in snapshots:
                if snapshot.name == snapshot_identifier or snapshot.uuid == snapshot_identifier:
                    print(f"Snapshot with name/UUID '{snapshot_identifier}' found.")
                    return snapshot
        except Exception as e:
            print(f"Error retrieving snapshot by name or UUID: {e}")
            traceback.print_exc()
        return None

    def close_existing_sessions(self):
        """Close any existing VM sessions."""
        try:
            if self.session is not None and self.session.state != pyvbox.SessionState_Unlocked:
                self.session.unlock()
                print("Existing session unlocked.")
        except Exception as e:
            print(f"Error closing existing session: {e}")

    def power_off_machine(self):
        """Power off the machine gracefully or forcefully."""
        try:
            self.close_existing_sessions()

            if self.machine.state != pyvbox.MachineState_PoweredOff:
                print("Powering off the machine...")
                # Check if the machine is locked and create a session if needed
                self.machine.lock_machine(self.session)
                console = self.session.console

                # Use the appropriate method to power down the machine
                try:
                    progress = console.power_down()  # Initiates the power-down process
                    progress.wait_for_completion(-1)  # Wait indefinitely for the operation to complete
                    print("Machine powered off successfully.")
                except pyvbox.VBoxError as e:
                    print(f"Error powering down the machine: {e}")
                    if hasattr(console, 'save_state'):  # Attempt to save state if power_down fails
                        print("Attempting to save state...")
                        progress = console.save_state()
                        progress.wait_for_completion(-1)
                        print("Machine state saved.")
                    else:
                        print("Unable to save state. Further checks required.")

                self.session.unlock()  # Unlock the session
            else:
                print("Machine is already powered off.")
        except Exception as e:
            print(f"Error powering off machine: {e}")
            traceback.print_exc()
            if self.session and self.session.state == pyvbox.SessionState_Locked:
                try:
                    self.session.unlock()
                except Exception as unlock_error:
                    print(f"Error unlocking session: {unlock_error}")


    def delete_snapshot(self, snapshot_identifier):
        """Delete a snapshot."""
        try:
            self.power_off_machine()

            snapshot = self.get_snapshot_by_name_or_uuid(snapshot_identifier)
            if snapshot:
                print(f"Deleting snapshot '{snapshot.name}'...")
                snapshot.delete()  # pyvbox supports deleting directly
                print(f"Snapshot '{snapshot.name}' deleted successfully.")
            else:
                print(f"Snapshot '{snapshot_identifier}' not found.")
        except Exception as e:
            print(f"Error deleting snapshot '{snapshot_identifier}': {e}")

    def create_snapshot(self, snapshot_name, snapshot_description):
        """Create a snapshot."""
        try:
            self.power_off_machine()

            print(f"Creating snapshot '{snapshot_name}'...")
            snapshot = self.machine.take_snapshot(snapshot_name, snapshot_description)
            print(f"Snapshot '{snapshot_name}' created successfully.")
        except Exception as e:
            print(f"Error creating snapshot '{snapshot_name}': {e}")

    def run_guest_command(self, command):
        """Run a command on the guest VM."""
        try:
            print(f"Running command: {command}")
            process = self.guest_session.process_create(command)

            while process.status == pyvbox.ProcessStatus_Starting:
                time.sleep(1)

            print(f"Process ID: {process.pid}")
            while process.status not in [
                pyvbox.ProcessStatus_TerminatedNormally,
                pyvbox.ProcessStatus_TerminatedSignal,
                pyvbox.ProcessStatus_TerminatedAbnormally,
                pyvbox.ProcessStatus_TimedOutKilled,
                pyvbox.ProcessStatus_TimedOutAbnormally,
                pyvbox.ProcessStatus_Error,
            ]:
                print(f"Current process status: {process.status}. Waiting...")
                time.sleep(1)

            status_messages = {
                pyvbox.ProcessStatus_TerminatedNormally: "Process terminated normally.",
                pyvbox.ProcessStatus_TerminatedSignal: "Process terminated due to a signal.",
                pyvbox.ProcessStatus_TerminatedAbnormally: "Process terminated abnormally.",
                pyvbox.ProcessStatus_TimedOutKilled: "Process was timed out and killed.",
                pyvbox.ProcessStatus_TimedOutAbnormally: "Process timed out and terminated abnormally.",
                pyvbox.ProcessStatus_Error: "Process encountered an error.",
            }

            print(status_messages.get(process.status, "Unknown process status."))
        except Exception as e:
            print(f"Error running guest command: {e}")
            traceback.print_exc()

    def close_session(self):
        """Closes the session."""
        print("Session does not require explicit closing.")


# Example Usage
if __name__ == "__main__":
    vm_manager = VirtualMachineSnapshotManager("malware_analysis", "hsbeyti", "12345678")
    if vm_manager.initialize_virtualbox():
        if vm_manager.locate_machine():
            snapshot_name_to_delete = "run_malware_and_die"
            snapshot_to_delete = vm_manager.get_snapshot_by_name_or_uuid(snapshot_name_to_delete)
            if snapshot_to_delete:
                vm_manager.delete_snapshot(snapshot_to_delete.uuid)
                snapshot_name = "run_malware_and_die"
                snapshot_description = "Snapshot after malware analysis process"
                vm_manager.create_snapshot(snapshot_name, snapshot_description)

            vm_manager.close_session()
