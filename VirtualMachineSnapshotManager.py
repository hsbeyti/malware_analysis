import uuid

from vboxapi import VirtualBoxManager


class VirtualMachineSnapshotManager:
    def __init__(self, vm_name, vm_user, vm_password):
        self.vm_name = vm_name
        self.vm_user = vm_user
        self.vm_password = vm_password
        self.manager = VirtualBoxManager(None, None)  # Initialize the VirtualBox Manager
        self.vbox = self.manager.vbox  # The VirtualBox object
        self.session = None
        self.vm = None
        self.guest_session = None

    def create_session(self):
        """Creates a session with the virtual machine."""
        try:
            # Find the VM by name
            self.vm = self.vbox.findMachine(self.vm_name)
            self.session = self.vbox.openSession(self.vm)  # Open a session for the VM
            print(f"Session created for VM {self.vm_name}.")

            # Create a guest session for interacting with the guest OS
            self.guest_session = self.session.console.createGuestSession(self.vm_user, self.vm_password)
            print(f"Guest session created with credentials for VM {self.vm_name}.")
        except Exception as e:
            print(f"Error creating session for VM {self.vm_name}: {e}")

    def get_snapshot_uuid_by_name(self, snapshot_name):
        """Returns the UUID of the snapshot with the specified name."""
        try:
            snapshots = self.vm.snapshots  # Get snapshots for the VM
            for snapshot in snapshots:
                if snapshot.name == snapshot_name:  # Check if the snapshot name matches
                    print(f"Snapshot '{snapshot_name}' found with UUID: {snapshot.id}")
                    return snapshot.id
            print(f"Snapshot '{snapshot_name}' not found.")
            return None
        except Exception as e:
            print(f"Error retrieving snapshot by name for VM {self.vm_name}: {e}")
            return None

    def delete_snapshot(self, snapshot_uuid):
        """Deletes the snapshot with the given UUID."""
        try:
            if snapshot_uuid:
                snapshot_id = uuid.UUID(snapshot_uuid)
                print(f"Deleting snapshot {snapshot_uuid}...")
                progress = self.vm.deleteSnapshot(snapshot_id)
                progress.waitForCompletion()  # Wait for the snapshot to be deleted
                print(f"Snapshot {snapshot_uuid} deleted successfully.")
            else:
                print("No valid snapshot UUID provided for deletion.")
        except Exception as e:
            print(f"Error deleting snapshot {snapshot_uuid}: {e}")

    def create_snapshot(self, snapshot_name, snapshot_description=""):
        """Creates a new snapshot for the virtual machine."""
        try:
            print(f"Creating snapshot {snapshot_name}...")
            progress = self.vm.takeSnapshot(snapshot_name, snapshot_description, False)
            progress.waitForCompletion()  # Wait for the snapshot to be created
            print(f"Snapshot {snapshot_name} created successfully.")
        except Exception as e:
            print(f"Error creating snapshot {snapshot_name}: {e}")

    def close_session(self):
        """Closes the session."""
        if self.session:
            self.session.close()
            print("Session closed.")

    def perform_guest_operations(self):
        """This method can be used for tasks that require guest interaction like copying files."""
        try:
            # Example of using the guest session to perform operations on the guest OS
            print("Performing operations on the guest VM...")
            # Example: You can copy files or run processes within the guest VM here
            # For instance, using the guest session to execute a command on the guest OS
            # self.guest_session.execute([...])
        except Exception as e:
            print(f"Error performing guest operations: {e}")

# Example Usage
if __name__ == "__main__":
    # Replace '_malware_analysis' with your actual VM name
    vm_manager = VirtualMachineSnapshotManager("_malware_analysis", "hsbeyti", "12345678")
    vm_manager.create_session()  # Create a session for the VM

    # Step 1: Get the UUID of the snapshot named 'run_malware_and_die'
    snapshot_name_to_delete = "run_malware_and_die"
    snapshot_uuid_to_delete = vm_manager.get_snapshot_uuid_by_name(snapshot_name_to_delete)

    # Step 2: Delete the snapshot if it was found
    if snapshot_uuid_to_delete:
        vm_manager.delete_snapshot(snapshot_uuid_to_delete)

        # Step 3: Create a new snapshot after deleting the old one
        snapshot_name = "new_snapshot"
        snapshot_description = "Snapshot after malware analysis process"
        vm_manager.create_snapshot(snapshot_name, snapshot_description)

    # Step 4: Perform guest operations (optional)
    vm_manager.perform_guest_operations()

    # Step 5: Close the session
    vm_manager.close_session()
