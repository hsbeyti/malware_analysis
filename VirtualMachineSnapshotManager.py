import os
from dotenv import load_dotenv
import threading
import traceback
from paramiko.proxy import subprocess
from vboxapi import VirtualBoxManager
import time

class VirtualMachineSnapshotManager:
    def __init__(self):
        # Load environment variables from .env file
        load_dotenv()

        # Assign variables from the .env file
        self.vm_name = os.getenv("VM_NAME_WINDOWS")
        self.base_snapshot_name = os.getenv("BASE_SNAPSHOT_NAME")
        self.test_snapshot_name = os.getenv("TEST_SNAPSHOT_NAME")
        self.vm_user = os.getenv("VM_USER_WINDOWS")
        self.vm_password = os.getenv("VM_PASSWORD_WINDOWS")
        self.vboxmanage_path = os.getenv("VBOXMANAGE_PATH_WINDOWS", r"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe")

        # Initialize other attributes
        self.mgr = None
        self.vbox = None
        self.session = None
        self.guest_session = None
        self.console = None
        self.windows_machine = None

    def initialize_virtualbox(self):
        """Initialize VirtualBox Manager and the VM session."""
        try:
            print("Initializing VirtualBoxManager...")
            self.mgr = VirtualBoxManager(None, None)  # Initialize the VirtualBox Manager
            self.vbox = self.mgr.getVirtualBox()  # Get the VirtualBox object
            self.session = self.mgr.getSessionObject(self.vbox)  # Get session object
            print("VirtualBox initialized successfully.")
        except Exception as e:
            print(f"Error initializing VirtualBox: {e}")
            traceback.print_exc()
            return False
        return True

    def locate_machine(self):
        """Locate and lock the VM machine."""
        try:
            self.windows_machine = self.vbox.findMachine(self.vm_name)  # Find the VM
            print(f"Machine located: {self.vm_name}.")
        except Exception as e:
            print(f"Error locating machine '{self.vm_name}': {e}")
            traceback.print_exc()
            return False
        return True

    def power_off_machine(self):
        """Power off the VirtualBox machine."""
        try:
            # Check the current VM state before powering off
            cmd_showvminfo = [self.vboxmanage_path, "showvminfo", self.vm_name, "--machinereadable"]
            output = subprocess.check_output(cmd_showvminfo, text=True)

            if 'VMState="running"' in output:
                cmd = [self.vboxmanage_path, "controlvm", self.vm_name, "poweroff"]
                subprocess.run(cmd, check=True)
                print("Machine powered off successfully.")
            else:
                print(f"Machine '{self.vm_name}' is not running. No need to power off.")
        except subprocess.CalledProcessError as e:
            print(f"Error powering off machine: {e}")

    def start_vm(self):
        """Start the VM and wait until it is fully started."""
        try:
            cmd_start = [self.vboxmanage_path, "startvm", self.vm_name, "--type", "headless"]
            subprocess.run(cmd_start, check=True)
            print(f"VM '{self.vm_name}' started successfully.")
        except subprocess.CalledProcessError as e:
            print(f"Error starting VM: {e}")

    def restore_snapshot(self, snapshot_name):
        """Restore the VM to a specified snapshot."""
        try:
            cmd = [self.vboxmanage_path, "snapshot", self.vm_name, "restore", snapshot_name]
            subprocess.run(cmd, check=True)
            print(f"Snapshot '{snapshot_name}' restored successfully.")
        except subprocess.CalledProcessError as e:
            print(f"Error restoring snapshot '{snapshot_name}': {e}")

    def delete_snapshot(self, snapshot_name):
        """Delete a snapshot by its name."""
        try:
            cmd = [self.vboxmanage_path, "snapshot", self.vm_name, "delete", snapshot_name]
            subprocess.run(cmd, check=True)
            print(f"Snapshot '{snapshot_name}' deleted successfully.")
        except subprocess.CalledProcessError as e:
            print(f"Error deleting snapshot '{snapshot_name}': {e}")

    def create_snapshot(self, snapshot_name, snapshot_description=""):
        """Create a new snapshot."""
        try:
            cmd = [self.vboxmanage_path, "snapshot", self.vm_name, "take", snapshot_name]
            if snapshot_description:
                cmd.extend(["--description", snapshot_description])
            subprocess.run(cmd, check=True)
            print(f"Snapshot '{snapshot_name}' created successfully.")
        except subprocess.CalledProcessError as e:
            print(f"Error creating snapshot '{snapshot_name}': {e}")

    def check_session_state(self):
        """Check if the VM has an active session lock."""
        try:
            cmd = [self.vboxmanage_path, "showvminfo", self.vm_name, "--machinereadable"]
            output = subprocess.check_output(cmd, text=True)
            if 'sessionState="Locked"' in output:
                print("VM is currently locked by another session. Attempting to unlock...")
                return True
            else:
                print("No session lock detected.")
                return False
        except subprocess.CalledProcessError as e:
            print(f"Error checking session state: {e}")
            return False

    def release_session(self):
        """Release the VM session to avoid locks."""
        try:
            if self.session:
                print("Releasing locked session...")
                self.session.unlockMachine()
                print("Session released successfully.")
            else:
                print("No session is currently locked.")
        except Exception as e:
            print(f"Error releasing session: {e}")

    # Additional methods (start_vm, etc.) remain unchanged but use self.vboxmanage_path

    def manage_snapshots_and_run_vm(self):
        """Manage snapshots and run the VM."""
        if not self.initialize_virtualbox():
            print("Failed to initialize VirtualBox Manager.")
            return

        if not self.locate_machine():
            print("Failed to locate the VirtualBox machine.")
            return

        try:
            # 1. Shut down VM
            print("Shutting down VM...")
            self.power_off_machine()

            # 2. Restore the base snapshot
            print(f"Restoring base snapshot: '{self.base_snapshot_name}'...")
            self.restore_snapshot(self.base_snapshot_name)

            # 3. Delete the old test snapshot
            print(f"Deleting old test snapshot: '{self.test_snapshot_name}'...")
            try:
                self.delete_snapshot(self.test_snapshot_name)
            except Exception as e:
                print(f"Old snapshot '{self.test_snapshot_name}' not found or couldn't be deleted: {e}")

            # 4. Create a new test snapshot
            print(f"Creating a new snapshot: '{self.test_snapshot_name}'...")
            self.create_snapshot(self.test_snapshot_name, "Snapshot for testing.")

            # Release session
            self.release_session()
            time.sleep(10)

            # 5. Start the VM for testing
            print("Starting the VM for malware testing...")
            self.start_vm()

        except Exception as e:
            print(f"Error during snapshot management and VM operations: {e}")
            traceback.print_exc()



# Example Usage
if __name__ == "__main__":
    # Create an instance of the VirtualMachineSnapshotManager
    vm_manager = VirtualMachineSnapshotManager()

    # Check initialization
    if not vm_manager.initialize_virtualbox():
        print("Failed to initialize VirtualBox Manager.")

    # Execute the snapshot management and VM start routine
    vm_manager.manage_snapshots_and_run_vm()