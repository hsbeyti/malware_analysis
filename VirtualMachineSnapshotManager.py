import threading
import traceback

from paramiko.proxy import subprocess
from vboxapi import VirtualBoxManager
import time

class VirtualMachineSnapshotManager:
    def __init__(self, vm_name, vm_user, vm_password):
        self.vm_name = vm_name
        self.vm_user = vm_user
        self.vm_password = vm_password
        self.mgr = None
        self.vbox = None
        self.session = None
        self.guest_session = None
        self.console = None
        self.windows_machine = None

    def initialize_virtualbox(self):
        """Initialize VirtualBox Manager and the VM session."""
        try:
            print("Initializing VirtualBoxManager...")
            self.mgr = VirtualBoxManager(None, None)  # Initialize the VirtualBox Manager
            self.vbox = self.mgr.getVirtualBox()  # Get the VirtualBox object
            self.session = self.mgr.getSessionObject(self.vbox)  # Get session object
            print("VirtualBox initialized successfully.")
        except Exception as e:
            print(f"Error initializing VirtualBox: {e}")
            traceback.print_exc()
            return False
        return True

    def locate_machine(self):
        """Locate and lock the VM machine."""
        try:
            self.windows_machine = self.vbox.findMachine(self.vm_name)  # Find the VM
            print(f"Machine located: {self.vm_name}.")
        except Exception as e:
            print(f"Error locating machine '{self.vm_name}': {e}")
            traceback.print_exc()
            return False
        return True

    def power_off_machine(self):
        """Power off the VirtualBox machine."""
        try:
            vboxmanage_path = r"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe"  # Adjust for your environment
            cmd = [vboxmanage_path, "controlvm", self.vm_name, "poweroff"]
            subprocess.run(cmd, check=True)
            print("Machine powered off successfully.")
        except subprocess.CalledProcessError as e:
            print(f"Error powering off machine: {e}")

    def restore_snapshot(self, snapshot_name):
        """Restore the VM to a specified snapshot."""
        try:
            vboxmanage_path = r"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe"  # Adjust for your environment
            cmd = [vboxmanage_path, "snapshot", self.vm_name, "restore", snapshot_name]
            subprocess.run(cmd, check=True)
            print(f"Snapshot '{snapshot_name}' restored successfully.")
        except subprocess.CalledProcessError as e:
            print(f"Error restoring snapshot '{snapshot_name}': {e}")

    def delete_snapshot(self, snapshot_name):
        """Delete a snapshot by its name."""
        try:
            vboxmanage_path = r"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe"  # Adjust for your environment
            cmd = [vboxmanage_path, "snapshot", self.vm_name, "delete", snapshot_name]
            subprocess.run(cmd, check=True)
            print(f"Snapshot '{snapshot_name}' deleted successfully.")
        except subprocess.CalledProcessError as e:
            print(f"Error deleting snapshot '{snapshot_name}': {e}")

    def create_snapshot(self, snapshot_name, snapshot_description=""):
        """Create a new snapshot."""
        try:
            vboxmanage_path = r"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe"  # Adjust for your environment
            cmd = [vboxmanage_path, "snapshot", self.vm_name, "take", snapshot_name]
            if snapshot_description:
                cmd.extend(["--description", snapshot_description])
            subprocess.run(cmd, check=True)
            print(f"Snapshot '{snapshot_name}' created successfully.")
        except subprocess.CalledProcessError as e:
            print(f"Error creating snapshot '{snapshot_name}': {e}")

    def check_session_state(self):
        """Check if the VM has an active session lock."""
        try:
            vboxmanage_path = r"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe"  # Adjust for your environment
            cmd = [vboxmanage_path, "showvminfo", self.vm_name, "--machinereadable"]
            output = subprocess.check_output(cmd, text=True)

            if 'sessionState="Locked"' in output:
                print("VM is currently locked by another session. Attempting to unlock...")
                return True
            else:
                print("No session lock detected.")
                return False
        except subprocess.CalledProcessError as e:
            print(f"Error checking session state: {e}")
            return False

    def release_session(self):
        """Release the VM session to avoid locks."""
        try:
            if self.session:
                print("Releasing locked session...")
                self.session.unlockMachine()
                print("Session released successfully.")
            else:
                print("No session is currently locked.")
        except Exception as e:
            print(f"Error releasing session: {e}")






    def start_vm(self):
        """Start the VM and wait until it is fully started."""
        try:
            vboxmanage_path = r"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe"  # Adjust for your environment

            # Check the current VM state
            print("Checking the current state of the VM...")
            cmd_showvminfo = [vboxmanage_path, "showvminfo", self.vm_name, "--machinereadable"]
            output = subprocess.check_output(cmd_showvminfo, text=True)
            if 'VMState="running"' in output:
                print("VM is already running.")
                return
            elif 'VMState="paused"' in output:
                print("VM is paused. Resuming the VM...")
                cmd_resume = [vboxmanage_path, "controlvm", self.vm_name, "resume"]
                subprocess.run(cmd_resume, check=True)
                print("VM resumed successfully.")
                return
            elif 'VMState="stuck"' in output or 'VMState="aborted"' in output:
                print("VM is in an invalid state. Attempting to power it off...")
                cmd_poweroff = [vboxmanage_path, "controlvm", self.vm_name, "poweroff"]
                subprocess.run(cmd_poweroff, check=True)
                print("VM powered off successfully.")

            # Check for session lock
            if self.check_session_state():
                print("Session locked detected. Releasing session...")
                self.release_session()

            # Start the VM
            print(f"Starting the VM '{self.vm_name}' in headless mode...")
            cmd_start = [vboxmanage_path, "startvm", self.vm_name, "--type", "headless"]
            subprocess.run(cmd_start, check=True)
            print("VM start command issued successfully.")

            # Wait until the VM is fully started
            print("Waiting for the VM to reach the 'running' state...")
            for _ in range(30):  # Timeout after 30 checks (adjust as needed)
                output = subprocess.check_output(cmd_showvminfo, text=True)
                if 'VMState="running"' in output:
                    print("VM is now running.")
                    break
                else:
                    print("VM is not fully started yet. Checking again in 2 seconds...")
                    time.sleep(2)
            else:
                raise Exception("Timed out waiting for the VM to reach the 'running' state.")

        except subprocess.CalledProcessError as e:
            print(f"Error starting VM: {e}")
        except Exception as e:
            print(f"Error while waiting for the VM to start: {e}")




# Example Usage
if __name__ == "__main__":
    vm_name = "malware_analysis"
    base_snapshot_name = "run_malware_and die"
    test_snapshot_name = "die"

    vm_manager = VirtualMachineSnapshotManager(vm_name, "hsbeyti", "12345678")

    if vm_manager.initialize_virtualbox():
        if vm_manager.locate_machine():
            try:
                # 1. Shut down VM
                print("Shutting down VM...")
                vm_manager.power_off_machine()

                # 2. Restore the base snapshot (this will discard changes from the test snapshot)
                print(f"Restoring base snapshot: '{base_snapshot_name}'...")
                vm_manager.restore_snapshot(base_snapshot_name)

                # 3. Delete the old test snapshot (if exists), so its changes are not persisted
                print(f"Checking and deleting old test snapshot: '{test_snapshot_name}'...")
                try:
                  vm_manager.delete_snapshot(test_snapshot_name)
                except Exception as e:
                    print(f"Old snapshot '{test_snapshot_name}' not found or couldn't be deleted: {e}")

                # 4. Create a new test snapshot after restoring the base snapshot
                print(f"Creating a new snapshot: '{test_snapshot_name}'...")
                vm_manager.create_snapshot(test_snapshot_name, "Snapshot for testing.")

                # Release session after creating the snapshot
                vm_manager.release_session()
                time.sleep(10)
                vm_manager.release_session()
                # 5. Start the VM for testing purposes
                print("Starting the VM for malware testing...")
                vm_manager.start_vm()
            except Exception as e:
                print(f"Error during VM operations: {e}")
                traceback.print_exc()
