import os
import struct
import shutil

def check_executable_type(file_path):
    """
    Checks whether an executable is a 32-bit or 64-bit Windows executable.

    Args:
        file_path (str): Path to the executable file.

    Returns:
        str: '32-bit', '64-bit', or None if not a valid executable.
    """
    try:
        with open(file_path, "rb") as f:
            # Read the first 64 bytes to locate the PE header
            dos_header = f.read(64)

            # Ensure it is a valid DOS header by checking the 'MZ' magic number
            if dos_header[:2] != b"MZ":
                return None

            # Locate the PE header offset
            pe_offset = struct.unpack("<I", dos_header[60:64])[0]

            # Seek to the PE header and read its signature
            f.seek(pe_offset)
            pe_header = f.read(6)

            if pe_header[:4] != b"PE\x00\x00":
                return None

            # Read the machine type from the PE header
            machine_type = struct.unpack("<H", pe_header[4:6])[0]

            if machine_type == 0x8664:
                return "64-bit"
            elif machine_type == 0x14c:
                return "32-bit"
            else:
                return None
    except Exception as e:
        print(f"Error reading file {file_path}: {e}")
        return None

def process_and_rename_executables(source_folder, target_folder):
    """
    Processes files in the source folder, checks if they are valid executables,
    and renames and saves them in the target folder.

    Args:
        source_folder (str): Path to the folder containing input files.
        target_folder (str): Path to the folder to save renamed executables.
    """
    if not os.path.exists(source_folder):
        print(f"ERROR: Source folder does not exist: {source_folder}")
        return

    if not os.path.exists(target_folder):
        os.makedirs(target_folder)
        print(f"DEBUG: Created target folder: {target_folder}")

    file_counter = 1

    for file in os.listdir(source_folder):
        file_path = os.path.join(source_folder, file)
        print(f"DEBUG: Processing file: {file_path}")

        if os.path.isfile(file_path):
            exec_type = check_executable_type(file_path)

            if exec_type:
                new_file_name = f"file_{file_counter}.exe"
                new_file_path = os.path.join(target_folder, new_file_name)
                shutil.copy2(file_path, new_file_path)
                print(f"DEBUG: {exec_type} executable found. Renamed and saved as {new_file_path}")
                file_counter += 1
            else:
                print(f"DEBUG: File {file_path} is not a valid executable. Skipping.")
        else:
            print(f"DEBUG: Skipping non-file entry: {file_path}")

    print("DEBUG: Processing completed.")

if __name__ == "__main__":
    source_folder = "./raw_malware"  # Replace with the path to your source folder
    target_folder = "./executable_malware"  # Replace with the path to your target folder

    print(f"DEBUG: Starting script with source_folder={source_folder} and target_folder={target_folder}")
    process_and_rename_executables(source_folder, target_folder)
    print("DEBUG: Script completed")
