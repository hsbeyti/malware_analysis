import json
import glob

def get_api_name(api_id, data_api):
    """Fetch the name of the API given its ID from the API data."""
    return next((name for name, id_value in data_api.items() if id_value == api_id), '-1')

def process_files(api_data_path, input_dir, output_file):
    """Process instrumented files and output results to a CSV file."""
    # Load API data
    with open(api_data_path) as file:
        data_api = json.load(file)

    # Get the list of instrumented files to process
    file_list = glob.glob(f"{input_dir}/*.csv")

    # Initialize counters
    total_syscalls = 0
    file_count = 0

    # Open the output file for writing processed data
    with open(output_file, "w") as fx:
        # Iterate through each instrumented file
        for file_name in file_list:
            file_count += 1
            total_syscalls = 0
            sys_call_ids_hist = {}

            # Process each file line by line
            with open(file_name, "r") as f_stats:
                pattern = 1
                previous_id = None

                # Read each line and process system call patterns
                for line in f_stats:
                    sys_id = line.split(',')

                    try:
                        # Parse the system call ID
                        id_int = int(sys_id[0])
                        if id_int > 400:
                            print("higher")
                        else:
                            total_syscalls += 1
                    except ValueError:
                        print("Invalid system call ID")
                        continue

                    # Update pattern frequency histogram
                    if sys_id[0] == previous_id:
                        pattern += 1
                    else:
                        if previous_id is not None:  # Skip the first iteration
                            sys_call_ids_hist.setdefault(previous_id, {}).setdefault(pattern, 0)
                            sys_call_ids_hist[previous_id][pattern] += 1
                        pattern = 1
                        previous_id = sys_id[0]

            # Calculate syscall percentages and write to output
            total_percentage = 0
            for api_name, api_id in data_api.items():
                if str(api_id) in sys_call_ids_hist:
                    # Initialize pattern data
                    final_data = [0] * 20
                    total_one_sys_calls = 0

                    for patt, count in sys_call_ids_hist[str(api_id)].items():
                        total_one_sys_calls += count * patt
                        if patt <= 20:
                            final_data[patt - 1] = 1

                    # Calculate percentage
                    syscall_percentage = (total_one_sys_calls * 100.0) / total_syscalls
                    total_percentage += total_one_sys_calls

                    # Write data to file
                    fx.write(f"{api_name},{api_id},1,{round(syscall_percentage, 2)}")
                    fx.writelines(f",{value}" for value in final_data)
                    fx.write("\n")
                else:
                    # Write data for APIs not present in the file
                    fx.write(f"{api_name},{api_id},0,0")
                    fx.writelines(",0" * 20)
                    fx.write("\n")
            fx.write("1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1")#api percentage
            fx.write('\n')
            print(f"Total percentage for file {file_name}: {total_percentage}")

    # Final output summary
    print(f"Processed {file_count} files.")

def main():
    """Main function to run the script."""
    api_data_path = "./win7APIntdll.json"
    input_dir = "./instrumented_binaries"
    output_file = "./readyForML/MWreadyForML.csv"

    process_files(api_data_path, input_dir, output_file)

if __name__ == "__main__":
    main()
